image: golang:1.9.4

pipelines:
  default:
    - step:
        script:
          - source bitbucket-pipelines-go.sh
          - cd ${IMPORT_PATH}
          - export DEP_RELEASE_TAG=v0.4.1
          - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          - curl -L https://git.io/vp6lP | sh
          - go version
          - dep ensure -vendor-only
          - dep status
          - lint=$(./bin/gometalinter ./...) && if [[ ! -z $lint ]]; then echo "Invalid gometalinter at $lint" && exit 1; fi
          - fmt=$(gofmt -s -l . | grep -v vendor/ | grep -v ".pb.go") && if [[ ! -z $fmt ]]; then echo "Invalid gofmt at $fmt" && exit 1; fi
          - go build
          - go test -v -covermode=atomic -coverprofile=coverage.tx
          - go tool cover -func=coverage.tx
        services:
          - database
  branches:
    # Change to staging after released
    default:
      - step:
          script:
            - source bitbucket-pipelines-go.sh
            - cd ${IMPORT_PATH}
            - export DEP_RELEASE_TAG=v0.4.1
            - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            - curl -L https://git.io/vp6lP | sh
            - go version
            - dep ensure -vendor-only
            - dep status
            - lint=$(./bin/gometalinter ./...) && if [[ ! -z $lint ]]; then echo "Invalid gometalinter at $lint" && exit 1; fi
            - fmt=$(gofmt -s -l . | grep -v vendor/ | grep -v ".pb.go") && if [[ ! -z $fmt ]]; then echo "Invalid gofmt at $fmt" && exit 1; fi
            - go build
            - go test -v -covermode=atomic -coverprofile=coverage.tx
            - go tool cover -func=coverage.tx
          services:
            - database
    # Copied from default branch to have a manual alternative
    staging:
      - step:
          script:
            - source bitbucket-pipelines-go.sh
            - cd ${IMPORT_PATH}
            - export DEP_RELEASE_TAG=v0.4.1
            - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            - curl -L https://git.io/vp6lP | sh
            - go version
            - dep ensure -vendor-only
            - dep status
            - lint=$(./bin/gometalinter ./...) && if [[ ! -z $lint ]]; then echo "Invalid gometalinter at $lint" && exit 1; fi
            - fmt=$(gofmt -s -l . | grep -v vendor/ | grep -v ".pb.go") && if [[ ! -z $fmt ]]; then echo "Invalid gofmt at $fmt" && exit 1; fi
            - go build
            - go test -v -covermode=atomic -coverprofile=coverage.tx
            - go tool cover -func=coverage.tx
            - apt-get update
            - apt-get install -y zip python3 python-pip
            - pip install boto3==1.3.0
            - zip -r /tmp/artifact.zip * .ebextension -x vendor/\*s
            - export APPLICATION_ENVIRONMENT="ignitionweb-production"
            - python beanstalk_deploy.py
          services:
            - database
    production:
      - step:
          script:
            - source bitbucket-pipelines-go.sh
            - cd ${IMPORT_PATH}
            - export DEP_RELEASE_TAG=v0.4.1
            - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            - curl -L https://git.io/vp6lP | sh
            - go version
            - dep ensure -vendor-only
            - dep status
            - lint=$(./bin/gometalinter ./...) && if [[ ! -z $lint ]]; then echo "Invalid gometalinter at $lint" && exit 1; fi
            - fmt=$(gofmt -s -l . | grep -v vendor/ | grep -v ".pb.go") && if [[ ! -z $fmt ]]; then echo "Invalid gofmt at $fmt" && exit 1; fi
            - go build
            - go test -v -covermode=atomic -coverprofile=coverage.tx
            - go tool cover -func=coverage.tx
            - apt-get update
            - apt-get install -y zip python3 python-pip
            - pip install boto3==1.3.0
            - zip -r /tmp/artifact.zip * .ebextension -x vendor/\*s
            - export APPLICATION_ENVIRONMENT="ignitionweb-production"
            - python beanstalk_deploy.py
          services:
            - database

definitions:
  services:
    database:
      image: mysql:5.7
      environment:
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: ignition_test
