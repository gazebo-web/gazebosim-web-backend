package models

import (
	"encoding/json"
	"time"
)

// BenchmarkCacheSubmission is the cache information generated by google benchmark
type BenchmarkCacheSubmission struct {
	Type       string `json:"type"`
	Level      uint   `json:"level"`
	Size       uint64 `json:"size"`
	NumSharing int    `json:"num_sharing"`
}

// BenchmarkContextSubmission is the context information generated by google benchmark
type BenchmarkContextSubmission struct {
	Date              string `json:"date"`
	HostName          string `json:"host_name"`
	Executable        string `json:"executable"`
	NumCpus           uint   `json:"num_cpus"`
	MhzPerCPU         uint   `json:"mhz_per_cpu"`
	CPUScalingEnabled bool   `json:"cpu_scaling_enabled"`
	LibraryBuildType  string `json:"library_build_type"`
	// LoadAvg []float64 `json:"load_avg"`
	Caches []BenchmarkCacheSubmission `json:"caches"`
}

// BenchmarkInstanceSubmission is the instance information generated by google benchmark
type BenchmarkInstanceSubmission struct {
	Name       string  `json:"name"`
	RunName    string  `json:"run_name"`
	RunType    string  `json:"run_type"`
	Iterations uint    `json:"iterations"`
	RealTime   float64 `json:"real_time"`
	CPUTime    float64 `json:"cpu_time"`
	TimeUnit   string  `json:"time_unit"`
}

// BenchmarkSubmission is the benchmark information generated by google benchmark
type BenchmarkSubmission struct {
	Context    BenchmarkContextSubmission    `json:"context"`
	Benchmarks []BenchmarkInstanceSubmission `json:"benchmarks"`
}

type BenchmarkSeriesInstance struct {
	Model
	// ID        uint       `gorm:"primary_key",json:"-"`
	// CreatedAt time.Time  `json:"-"`
	// UpdatedAt time.Time  `json:"-"`
	// DeletedAt *time.Time `json:"-",sql:"index"`

	// BenchmarkID is the foreign key back to Benchmark
	BenchmarkID uint `json:"-"`

	// Date is the time when this datapoint was generated.
	Date time.Time `json:"date"`

	// RunType is the type of google benchmark run.
	RunType string `json:"-"`

	// Iterations is the count of iterations performed.
	Iterations uint `json:"-"`

	// RealTime is the wall-clock time it took to complete the test.
	RealTime float64 `json:"real_time"`

	// CPUTime is the CPU time it took to complete the test.
	CPUTime float64 `json:"cpu_time"`

	// TimeUnit is the  units of time measured by CPUTime and RealTime.
	TimeUnit string `json:"time_unit"`

	// Json is the raw json data, which could contain extra information.
	Raw json.RawMessage `json:"-"`
}

type Benchmark struct {
	Model
	// ID        uint       `gorm:"primary_key",json:"-"`
	// CreatedAt time.Time  `json:"-"`
	// UpdatedAt time.Time  `json:"-"`
	// DeletedAt *time.Time `json:"-",sql:"index"`

	// Foreign key back to BenchmarkLibs
	BenchmarkLibsID uint `json:"-"`

	// Name is a benchmark/test name, such as "each_performance"
	Name string `json:"name"`

	// Series is a time series of benchmark instances.
	Series []BenchmarkSeriesInstance `json:"-"`
}

// Custom JSON marshal message to format the data for ngx-charts
func (b *Benchmark) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.Name)
}

// BenchmarkLibs stores benchmark data for a library, such as gazebo or transport.
type BenchmarkLibs struct {
	Model
	// ID        uint       `gorm:"primary_key",json:"-"`
	// CreatedAt time.Time  `json:"-"`
	// UpdatedAt time.Time  `json:"-"`
	// DeletedAt *time.Time `json:"-",sql:"index"`

	// Name == "gazebo" or "math"
	Name string `json:"name"`

	// Bechmarks contains all the benchmark data for the library.
	Benchmarks []Benchmark `json:"benchmarks"`
}

// Custom JSON marshal message to format the data for ngx-charts
func (b *BenchmarkLibs) MarshalJSON() ([]byte, error) {
	return json.Marshal(&struct {
		Name       string      `json:"name"`
		Benchmarks []Benchmark `json:"benchmarks"`
	}{
		Name:       b.Name,
		Benchmarks: b.Benchmarks,
	})
}
